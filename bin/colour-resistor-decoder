#! /usr/bin/env python
# -*- coding: utf-8 -*-

####################################################################################################
# 
# PyElectronic - Python Electronic Tools
# Copyright (C) Salvaire Fabrice 2012 
# 
####################################################################################################

####################################################################################################

import sys

from PyQt4 import QtGui, QtCore

####################################################################################################

from PyElectronic.ResistorWidget import HypothesesTableModel, ColourMatrix, ImageDelegate
from PyElectronic.GuiTools import translate

####################################################################################################

class Application(QtGui.QApplication):

    ###############################################
    
    def __init__(self):

        super(Application, self).__init__(sys.argv)

        self._init_widget()
        self._main_window.show()

    ###############################################
    
    def _init_widget(self):

        self._main_window = QtGui.QMainWindow()
        self._main_window.setObjectName("main_window")
        self._main_window.resize(1024, 800)
        self._main_window.setWindowTitle(translate("colour_decoder", "Resistance Decoder"))

        central_widget = QtGui.QWidget(self._main_window)
        self._vertical_layout = QtGui.QVBoxLayout(central_widget)
        self._main_window.setCentralWidget(central_widget)

        self._init_colour_widget()
        self._init_hypotheses_widget()
        self._colour_matrix.value_changed.connect(self._hypotheses_table_model._update_hypotheses)

        spacer_item = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self._vertical_layout.addItem(spacer_item)

    ###############################################
    
    def _init_colour_widget(self):

        self._colour_code_group_box = QtGui.QGroupBox(self._main_window)
        self._colour_code_group_box.setTitle(translate("colour_decoder", "Colour Code"))
        self._vertical_layout.addWidget(self._colour_code_group_box)

        horizontal_layout = QtGui.QHBoxLayout(self._colour_code_group_box)

        self._colour_matrix = ColourMatrix(self._colour_code_group_box)
        horizontal_layout.addLayout(self._colour_matrix.widget())

        spacer_item = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
        horizontal_layout.addItem(spacer_item)

    ###############################################
    
    def _init_hypotheses_widget(self):

        self._hypotheses_group_box = QtGui.QGroupBox(self._main_window)
        self._hypotheses_group_box.setTitle(translate("colour_decoder", "Hypotheses"))
        self._vertical_layout.addWidget(self._hypotheses_group_box)

        horizontal_layout = QtGui.QHBoxLayout(self._hypotheses_group_box)

        self._hypotheses_table_model = HypothesesTableModel()

        self._table_view = QtGui.QTableView(self._hypotheses_group_box)
        self._table_view.setAlternatingRowColors(True)
        self._table_view.setSortingEnabled(True)
        self._table_view.setModel(self._hypotheses_table_model)
        self._table_view.resizeColumnsToContents()
        horizontal_layout.addWidget(self._table_view)

        margin = 5
        resistor_pixmap_size = QtCore.QSize(100, 50)
        image_delegate = ImageDelegate(None, margin, resistor_pixmap_size)
        column = self._hypotheses_table_model.column_index('colour code')
        self._table_view.setItemDelegateForColumn(column, image_delegate)

####################################################################################################

application = Application()
application.exec_()

####################################################################################################
#
# End
#
####################################################################################################
